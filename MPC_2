import casadi as ca
from casadi import *
import math
import numpy as np
import matplotlib.pyplot as plt
from Sim_code import simulate
from time import time


def shift_timestep(step_horizon, t0, state_init, u, f):
    f_value = f(state_init, u[:, 0])
    next_state = ca.DM.full(state_init + (step_horizon * f_value))

    t0 = t0 + step_horizon
    u0 = ca.horzcat(
        u[:, 1:],
        ca.reshape(u[:, -1], -1, 1)
    )

    return t0, next_state, u0


def DM2Arr(dm):
    return np.array(dm.full())


# weights
Q_X = 9
Q_Y = 7
Q_theta = 1
R_w1 = 0.05
R_w2 = 0.05
R_w3 = 0.05
R_w4 = 0.05

# MPC CUs
h = 0.2
N = 20

# Robot char
rob_diam = 0.3
Rw = 0.1
L = 0.2
l = 0.1

# input constrains
omega_max = math.pi
omega_min = -omega_max

x = ca.SX.sym('x')
y = ca.SX.sym('y')
theta = ca.SX.sym('theta')
states = ca.vertcat(x, y, theta)
n_states = states.numel()

omega_w1 = ca.SX.sym('omega_w1')
omega_w2 = ca.SX.sym('omega_w2')
omega_w3 = ca.SX.sym('omega_w3')
omega_w4 = ca.SX.sym('omega_w4')
controls = ca.vertcat(omega_w1, omega_w2, omega_w3, omega_w4)
n_controls = controls.numel()

# discretization model
rot_3d_z = ca.vertcat(
    ca.horzcat(cos(theta), -sin(theta), 0),
    ca.horzcat(sin(theta), cos(theta), 0),
    ca.horzcat(0, 0, 1)
)
j0_plus = (Rw / 4) * ca.DM([
    [1, 1, 1, 1],
    [-1, 1, 1, -1],
    [-1 / (L + l), 1 / (L + l), -1 / (L + l), 1 / (L + l)]
])
rhs = rot_3d_z @ j0_plus @ controls
# --------------------------------------------------------------------


f = ca.Function('f', [states, controls], [rhs])
X = ca.SX.sym = ('X', n_states, (N + 1))
U = ca.SX.sym = ('U', n_controls, N)
P = ca.SX.sym = ('P', n_states + n_states)

obj = 0
g = X[:, 0] - P[:n_states]

# calculating objective and manage constrains
Q = diagcat(Q_X, Q_Y, Q_theta)
R = diagcat(R_w1, R_w2, R_w3, R_w4)
for k in range(N):
    st = X[:, k]
    con = U[:, k]
    obj = obj + (st - P[:, n_states]).T @ Q @ (st - P[:, n_states]) + con.T @ R @ con
    st_next = X[:, k + 1]
    k1 = f(st, con)
    k2 = f(st + h / 2 * k1, con)
    k3 = f(st + h / 2 * k2, con)
    k4 = f(st + h * k3, con)
    st_next_RK4 = st + (h / 6) * (k1 + 2 * k2 + 2 * k3 + k4)
    g = ca.vertcat(g, st_next - st_next_RK4)

# Gathering optmization variables
OPT_variables = ca.vertcat(ca.reshape(X, n_states * (N + 1), 1), ca.reshape(U, n_controls * N, 1))

nlp_prob = {'f': obj, 'x': OPT_variables, 'g': g, 'p': P}
# f: objective eqn
# x: optmization variables
# g: constrains 1
# p: output parameters (constrains 2)


opts = {
    'ipopt': {
        'max_iter': 2000,
        'print_level': 0,
        'acceptable_tol': 1e-8,
        'acceptable_obj_change_tol': 1e-6
    },
    'print_time': 0
}

solver = ca.nlpsol('solver', 'ipopt', nlp_prob, opts)

lbx = ca.DM.zeros((n_states * (N + 1) + n_controls * N, 1))
ubx = ca.DM.zeros((n_states * (N + 1) + n_controls * N, 1))

lbx[0: n_states * (N + 1): n_states] = -ca.inf
lbx[1: n_states * (N + 1): n_states] = -ca.inf
lbx[2: n_states * (N + 1): n_states] = -ca.inf

ubx[0: n_states * (N + 1): n_states] = ca.inf
ubx[1: n_states * (N + 1): n_states] = ca.inf
ubx[2: n_states * (N + 1): n_states] = ca.inf

lbx[n_states * (N + 1):] = omega_min
ubx[n_states * (N + 1):] = omega_max

args = dict(lbg=ca.DM.zeros((n_states * (N + 1), 1)), ubg=ca.DM.zeros((n_states * (N + 1), 1)), lbx=lbx, ubx=ubx)

t0 = 0
state_init = ca.DM([0, 0, 0])  # initial state
state_target = ca.DM([15, 15, math.pi])  # target state

# xx = DM(state_init)
t = ca.DM(t0)

u0 = ca.DM.zeros((n_controls, N))  # initial control
X0 = ca.repmat(state_init, 1, N + 1)  # initial state full

mpc_iter = 0
cat_states = DM2Arr(X0)
cat_controls = DM2Arr(u0[:, 0])
times = np.array([[0]])
sim_time = 200


# Simulation loop
if __name__ == '__main__':
    main_loop = time()  # return time in sec
    while (ca.norm_2(state_init - state_target) > 1e-1) and (mpc_iter * h < sim_time):
        t1 = time()
        args['p'] = ca.vertcat(
            state_init,    # current state
            state_target   # target state
        )
        # optimization variable current state
        args['x0'] = ca.vertcat(
            ca.reshape(X0, n_states*(N+1), 1),
            ca.reshape(u0, n_controls*N, 1)
        )

        sol = solver(
            x0=args['x0'],
            lbx=args['lbx'],
            ubx=args['ubx'],
            lbg=args['lbg'],
            ubg=args['ubg'],
            p=args['p']
        )

        u = ca.reshape(sol['x'][n_states * (N + 1):], n_controls, N)
        X0 = ca.reshape(sol['x'][: n_states * (N+1)], n_states, N+1)

        cat_states = np.dstack((
            cat_states,
            DM2Arr(X0)
        ))

        cat_controls = np.vstack((
            cat_controls,
            DM2Arr(u[:, 0])
        ))
        t = np.vstack((
            t,
            t0
        ))

        t0, state_init, u0 = shift_timestep(h, t0, state_init, u, f)

        # print(X0)
        X0 = ca.horzcat(
            X0[:, 1:],
            ca.reshape(X0[:, -1], -1, 1)
        )

        # xx ...
        t2 = time()
        print(mpc_iter)
        print(t2-t1)
        times = np.vstack((
            times,
            t2-t1
        ))

        mpc_iter = mpc_iter + 1

    main_loop_time = time()
    ss_error = ca.norm_2(state_init - state_target)

    print('\n\n')
    print('Total time: ', main_loop_time - main_loop)
    print('avg iteration time: ', np.array(times).mean() * 1000, 'ms')
    print('final error: ', ss_error)

    # simulate
    simulate(cat_states, cat_controls, times, h, N, np.array([0, 0, 0, 15, 15, math.pi]), save=False)
